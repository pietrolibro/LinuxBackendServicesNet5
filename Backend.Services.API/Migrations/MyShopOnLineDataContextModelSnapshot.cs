// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShopOnLine.Backend.Data;

namespace MyShopOnLine.Backend.Migrations
{
    [DbContext(typeof(MyShopOnLineDataContext))]
    partial class MyShopOnLineDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MyShopOnLine.Backend.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShippingAddressEqualsToBillingAddress")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "pietro.libro@gmail.com",
                            Fullname = "Pietro Libro",
                            ShippingAddressEqualsToBillingAddress = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "pinco.pallo@outlook.com",
                            Fullname = "Pinco Tizio Pallo",
                            ShippingAddressEqualsToBillingAddress = true
                        },
                        new
                        {
                            Id = 3,
                            Email = "john.Smith@yahoo.com",
                            Fullname = "John Smith",
                            ShippingAddressEqualsToBillingAddress = true
                        });
                });

            modelBuilder.Entity("MyShopOnLine.Backend.Models.Order", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReadyForShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("Shipped")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("DECIMAL (8,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL (8,2)");

                    b.HasKey("Number");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyShopOnLine.Backend.Models.OrderProduct", b =>
                {
                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("OrderNumber", "ProductCode");

                    b.HasIndex("ProductCode");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("MyShopOnLine.Backend.Models.Product", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL (8,2)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL (8,2)");

                    b.Property<int>("QuantityPerUnitPack")
                        .HasColumnType("int");

                    b.Property<int>("Review")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("DECIMAL (8,2)");

                    b.HasKey("Code");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Code = "ITEM00001",
                            Cost = 599.99m,
                            Description = "Laptop Computer",
                            Price = 779.99m,
                            QuantityPerUnitPack = 1,
                            Review = 5,
                            Weight = 1.7m
                        },
                        new
                        {
                            Code = "ITEM00002",
                            Cost = 399.45m,
                            Description = "Desktop Computer",
                            Price = 519.29m,
                            QuantityPerUnitPack = 1,
                            Review = 5,
                            Weight = 12.5m
                        },
                        new
                        {
                            Code = "ITEM00003",
                            Cost = 550m,
                            Description = "HPC Graphic Card",
                            Price = 715m,
                            QuantityPerUnitPack = 1,
                            Review = 5,
                            Weight = 2.5m
                        });
                });

            modelBuilder.Entity("MyShopOnLine.Backend.Models.Customer", b =>
                {
                    b.OwnsOne("MyShopOnLine.Backend.Models.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = 1,
                                    City = "Zürich",
                                    Street = "Bahnhofstrasse, 1",
                                    ZipCode = "8000"
                                },
                                new
                                {
                                    CustomerId = 2,
                                    City = "Rome",
                                    Street = "Piazza Porta Maggione 1",
                                    ZipCode = "08100"
                                },
                                new
                                {
                                    CustomerId = 3,
                                    City = "New York City",
                                    Street = "620 8th Ave #1",
                                    ZipCode = "NY 10018"
                                });
                        });

                    b.OwnsOne("MyShopOnLine.Backend.Models.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("MyShopOnLine.Backend.Models.Order", b =>
                {
                    b.HasOne("MyShopOnLine.Backend.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyShopOnLine.Backend.Models.OrderProduct", b =>
                {
                    b.HasOne("MyShopOnLine.Backend.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShopOnLine.Backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
